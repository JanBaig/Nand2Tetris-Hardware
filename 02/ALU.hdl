// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS: 
    // Always remember to use the OUT pin

    // ZX Selection Pin
        // 2's Complement X 
        Not16(in=x, out=ZXNot);
        Inc16(in=ZXNot, out=x2Comp); 

        // Add X + (-X) to get 0
        Add16(a=x, b=x2Comp, out=xZero); 

        Mux16(a=x, b=xZero, sel=zx, out=ZXout);  

    // NX Selection Pin 
        Not16(in=ZXout, out=NXNot);
        Mux16(a=ZXout, b=NXNot, sel=nx, out=NXout); 

    // ZY Selection Pin 
        // 2's Complement Y 
        Not16(in=y, out=ZYNot);
        Inc16(in=ZYNot, out=y2Comp); 

        // Add Y + (-Y) to get 0
        Add16(a=y, b=y2Comp, out=yZero); 

        //ZYout pin
        Mux16(a=y, b=yZero, sel=zy, out=ZYout); 
    
    // NY Selection Pin
        Not16(in=ZYout, out=NYNot);
        Mux16(a=ZYout, b=NYNot, sel=ny, out=NYout);

    // F Selection Pin 
        // X AND Y 
        And16(a=NXout, b=NYout, out=XYAnd);

        // X + Y (Full adder  or half?)
        Add16(a=NXout, b=NYout, out=XYAdd);

        Mux16(a=XYAnd, b=XYAdd, sel=f, out=Fout);  
    
    // NO Selection Pin
        Not16(in=Fout, out=NONot);
        Mux16(a=Fout, b=NONot, sel=no, out=out); 

        Mux16(a=Fout, b=NONot, sel=no, out[0..7]=NOout1, out[8..15]=NOout2, out=NOout);

    // ZR Output Pin - Note: xZero is simply a 16 bit digit = 0
        Or8Way(in=NOout1, out=ZROr1);
        Or8Way(in=NOout2, out=ZROr2);
        Or(a=ZROr1, b=ZROr2, out=ZROr);
        Not(in=ZROr, out=zr); 

    // NG Selection Pin 
        And16(a=NOout, b=NOout, out[15]=ng);

}